{"version":3,"sources":["myFirebase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","evnet","autoFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","data","marginTop","key","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAeAA,gBAVuB,CACnBC,OAAQC,0CACRC,WAAYD,qCACZE,YAAaF,4CACbG,UAAWH,qBACXI,cAAeJ,iCACfK,kBAAmBL,cACnBM,MAAON,6CAIJ,IAAMO,EAAmBT,EACnBU,EAAcV,SACdW,EAAYX,cACZY,EAAiBZ,YCoDfa,EApEE,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEaF,mBAAS,IAFtB,mBAEZG,EAFY,KAEFC,EAFE,OAGiBJ,oBAAS,GAH1B,mBAGZK,EAHY,KAGAC,EAHA,OAION,mBAAS,IAJhB,mBAIZO,EAJY,KAILC,EAJK,KAKbC,EAAW,SAACC,GAAW,IAAD,EAGpBA,EADAC,OAAUC,EAFU,EAEVA,KAAMC,EAFI,EAEJA,MAEP,UAATD,EACAV,EAASW,GACO,aAATD,GACPR,EAAYS,IAGdC,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,yDACbL,EAAMM,iBADO,UAGLX,EAHK,gCAKCT,EAAYqB,+BACdhB,EACAE,GAPC,6CAWCP,EAAYsB,2BAA2BjB,EAAOE,GAX/C,yDAcTK,EAAS,KAAMW,SAdN,0DAAH,sDAkBd,OACI,oCACI,0BAAML,SAAUA,EAAUM,UAAU,aAChC,2BACIR,KAAK,QACLS,KAAK,QACLC,YAAY,QACZC,UAAQ,EACRV,MAAOZ,EACPQ,SAAUA,EACVW,UAAU,cAEd,2BACIR,KAAK,WACLS,KAAK,WACLC,YAAY,WACZC,UAAQ,EACRV,MAAOV,EACPM,SAAUA,EACVW,UAAU,cAEd,2BACIC,KAAK,SACLD,UAAU,uBACVP,MAAOR,EAAa,iBAAmB,WAE1CE,GAAS,0BAAMa,UAAU,aAAab,IAE3C,0BAAMiB,QA7BQ,kBAAMlB,GAAc,SAACmB,GAAD,OAAWA,MA6BfL,UAAU,cACnCf,EAAa,UAAY,oB,eCb3BqB,EA1CF,WACT,IAAMC,EAAa,uCAAG,WAAOjB,GAAP,iBAAAK,EAAA,4DAKL,YAHCH,EACVF,EADAC,OAAUC,MAIVgB,EAAW,IAAIjC,EAAiBkC,KAAKC,mBACrB,WAATlB,IACPgB,EAAW,IAAIjC,EAAiBkC,KAAKE,oBARvB,SAUZnC,EAAYoC,gBAAgBJ,GAVhB,2CAAH,sDAYnB,OACI,yBAAKR,UAAU,iBACX,kBAAC,IAAD,CACIa,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLC,MAAO,CAAEC,aAAc,MAE3B,kBAAC,EAAD,MACA,yBAAKlB,UAAU,YACX,4BACII,QAASG,EACTf,KAAK,SACLQ,UAAU,WAHd,wBAKyB,kBAAC,IAAD,CAAiBa,KAAMM,OAEhD,4BACIf,QAASG,EACTf,KAAK,SACLQ,UAAU,WAHd,wBAKyB,kBAAC,IAAD,CAAiBa,KAAMO,U,gBC+BjDC,EAvED,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAAc,EACP3C,oBAAS,GADF,mBAC9B4C,EAD8B,KACrBC,EADqB,OAEL7C,mBAAS0C,EAASI,MAFb,mBAE9BC,EAF8B,KAEpBC,EAFoB,KAG/BC,EAAa,uCAAG,sBAAAlC,EAAA,0DACPmC,OAAOC,QAAQ,wEADR,gCAIRtD,EAAUuD,IAAV,iBAAwBV,EAASW,KAAMC,SAJ/B,uBAKRxD,EAAeyD,WAAWb,EAASc,eAAeF,SAL1C,2CAAH,qDAQbG,EAAgB,kBAAMZ,GAAW,SAACpB,GAAD,OAAWA,MAC5CX,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,6DACbL,EAAMM,iBADO,SAEPnB,EAAUuD,IAAV,iBAAwBV,EAASW,KAAMK,OAAO,CAChDZ,KAAMC,IAHG,OAKbF,GAAW,GALE,2CAAH,sDAad,OACI,yBAAKzB,UAAU,SACVwB,EACG,oCACI,0BAAM9B,SAAUA,EAAUM,UAAU,uBAChC,2BACIC,KAAK,OACLC,YAAY,kBACZT,MAAOkC,EACPxB,UAAQ,EACRd,SAhBP,SAACkD,GAAW,IAEX9C,EACV8C,EADAhD,OAAUE,MAEdmC,EAAYnC,IAaQ+C,WAAS,EACTxC,UAAU,cAEd,2BACIC,KAAK,SACLR,MAAM,eACNO,UAAU,aAGlB,0BAAMI,QAASiC,EAAerC,UAAU,qBAAxC,WAKJ,oCACI,4BAAKsB,EAASI,MACbJ,EAASc,eACN,yBAAKK,IAAKnB,EAASc,gBAEtBb,GACG,yBAAKvB,UAAU,kBACX,0BAAMI,QAASyB,GACX,kBAAC,IAAD,CAAiBhB,KAAM6B,OAE3B,0BAAMtC,QAASiC,GACX,kBAAC,IAAD,CAAiBxB,KAAM8B,W,QCuCxCC,EAnGM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACRjE,mBAAS,IADD,mBAC3BkE,EAD2B,KACpBC,EADoB,OAEEnE,mBAAS,IAFX,mBAE3BoE,EAF2B,KAEfC,EAFe,KAS5BvD,EAAQ,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,yDACC,KAAVmD,EADS,oDAIbxD,EAAMM,iBACFwC,EAAgB,GAED,KAAfY,EAPS,wBAQHE,EAAgBxE,EACjByE,MACAC,MAFiB,UAERP,EAAQQ,IAFA,YAEOC,gBAVpB,SAWcJ,EAAcK,UACjCP,EACA,YAbK,cAWHQ,EAXG,iBAeaA,EAASL,IAAIM,iBAf1B,QAeTrB,EAfS,sBAiBPd,EAAW,CACbI,KAAMoB,EACNY,UAAWC,KAAKC,MAChBC,UAAWhB,EAAQQ,IACnBjB,iBArBS,UAuBP3D,EAAUqF,WAAW,UAAUC,IAAIzC,GAvB5B,QAwBbyB,EAAS,IACTE,EAAc,IAzBD,4CAAH,sDA0Cd,OACI,0BAAMvD,SAAUA,EAAUM,UAAU,eAChC,yBAAKA,UAAU,2BACX,2BACIA,UAAU,sBACVP,MAAOqD,EACPzD,SAtDC,SAACC,GAAW,IAEXG,EACVH,EADAC,OAAUE,MAEdsD,EAAStD,IAmDGQ,KAAK,OACLC,YAAY,uBACZ8D,UAAW,MAEf,2BACI/D,KAAK,SACLR,MAAM,SACNO,UAAU,yBAGlB,2BAAOiE,IAAI,cAAcjE,UAAU,uBAC/B,4CACA,kBAAC,IAAD,CAAiBa,KAAMqD,OAE3B,2BACIjC,GAAG,cACHhC,KAAK,OACLkE,OAAO,UACP9E,SAxCS,SAACC,GAAW,IAIvB8E,EADF9E,EADAC,OAAU8E,MAEQ,GAChBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAAmB,IAEdC,EACjBD,EADAE,cAAiBD,OAErBzB,EAAcyB,IAElBJ,EAAOM,cAAcR,IA6BbnD,MAAO,CAAE4D,QAAS,KAGrB7B,GACG,yBAAKhD,UAAU,2BACX,yBACIyC,IAAKO,EACL/B,MAAO,CAAE6D,gBAAiB9B,KAE9B,yBACIhD,UAAU,qBACVI,QAtCM,kBAAM6C,EAAc,MAwC1B,wCACA,kBAAC,IAAD,CAAiBpC,KAAMkE,UChEhCC,EA5BF,SAAC,GAAiB,IAAfnC,EAAc,EAAdA,QAAc,EACEjE,mBAAS,IADX,mBACnBqG,EADmB,KACXC,EADW,KAY1B,OAVAC,qBAAU,WACN1G,EAAUqF,WAAW,UAAUsB,YAAW,SAACC,GACvC,IAAMC,EAAaD,EAASE,KAAKC,KAAI,SAACxD,GAAD,oBACjCC,GAAID,EAAIC,IACLD,EAAIyD,WAEXP,EAAUI,QAEf,IAGC,yBAAKtF,UAAU,aACX,kBAAC,EAAD,CAAc6C,QAASA,IACvB,yBAAK5B,MAAO,CAAEyE,UAAW,KACpBT,EAAOO,KAAI,SAAC1C,GAAD,OACR,kBAAC,EAAD,CACI6C,IAAK7C,EAAMb,GACXX,SAAUwB,EACVvB,QAASuB,EAAMe,YAAchB,EAAQQ,YCyB9CuC,EA9CC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAahD,EAAc,EAAdA,QACtBiD,EAAUC,cAD0B,EAEEnH,mBAASiE,EAAQmD,aAFnB,mBAEnCC,EAFmC,KAEnBC,EAFmB,KAapCxG,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,yDACbL,EAAMM,iBACFiD,EAAQmD,cAAgBC,EAFf,gCAGHpD,EAAQsD,cAAc,CACxBH,YAAaC,IAJR,OAMTJ,IANS,2CAAH,sDASd,OACI,yBAAK7F,UAAU,aACX,0BAAMN,SAAUA,EAAUM,UAAU,eAChC,2BACIwC,WAAS,EACTnD,SApBC,SAACC,GAAW,IAEXG,EACVH,EADAC,OAAUE,MAEdyG,EAAkBzG,IAiBNQ,KAAK,OACLC,YAAY,eACZT,MAAOwG,EACPjG,UAAU,cAEd,2BACIC,KAAK,SACLR,MAAM,iBACNO,UAAU,UACViB,MAAO,CAAEyE,UAAW,OAG5B,0BAAM1F,UAAU,2BAA2BI,QArC7B,WAClB5B,EAAY4H,UACZN,EAAQO,KAAK,OAmCT,a,QCCGC,EAxCI,SAAC,GAAD,IAAGzD,EAAH,EAAGA,QAAH,OACf,6BACI,wBACI5B,MAAO,CAAEsF,QAAS,OAAQC,eAAgB,SAAUd,UAAW,KAE/D,4BACI,kBAAC,IAAD,CAAMe,GAAG,IAAIxF,MAAO,CAAEyF,YAAa,KAC/B,kBAAC,IAAD,CACI7F,KAAMC,IACNC,MAAO,UACPC,KAAK,SAIjB,4BACI,kBAAC,IAAD,CACIyF,GAAG,WACHxF,MAAO,CACH0F,WAAY,GACZJ,QAAS,OACTK,cAAe,SACfC,WAAY,SACZC,SAAU,KAGd,kBAAC,IAAD,CACIjG,KAAMkG,IACNhG,MAAO,UACPC,KAAK,OAET,0BAAMC,MAAO,CAAEyE,UAAW,KACrB7C,EAAQmD,YAAR,UACQnD,EAAQmD,YADhB,kBAEK,gBCKfgB,EApCG,SAAC,GAA0C,IAAxCnB,EAAuC,EAAvCA,YAAaoB,EAA0B,EAA1BA,WAAYpE,EAAc,EAAdA,QAC1C,OACI,kBAAC,IAAD,KACKoE,GAAc,kBAAC,EAAD,CAAYpE,QAASA,IACpC,kBAAC,IAAD,KACKoE,EACG,yBACIhG,MAAO,CACHiG,SAAU,IACVC,MAAO,OACPC,OAAQ,SACR1B,UAAW,GACXa,QAAS,OACTC,eAAgB,WAGpB,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,CAAMzE,QAASA,KAEnB,kBAAC,IAAD,CAAOwE,OAAK,EAACC,KAAK,YACd,kBAAC,EAAD,CACIzE,QAASA,EACTgD,YAAaA,MAKzB,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,UCUTC,MAzCf,WAAgB,IAAD,EACa3I,oBAAS,GADtB,mBACJ4I,EADI,KACEC,EADF,OAEmB7I,mBAAS,MAF5B,mBAEJiE,EAFI,KAEK6E,EAFL,KA0BX,OAvBAvC,qBAAU,WACN3G,EAAYmJ,oBAAmB,SAACC,GAGxBF,EADAE,EACW,CACP5B,YAAa4B,EAAK5B,YAClB3C,IAAKuE,EAAKvE,IACV8C,cAAe,SAAC0B,GAAD,OAAUD,EAAKzB,cAAc0B,KAGrC,MAEfJ,GAAQ,QAEb,IAUC,oCACKD,EACG,kBAAC,EAAD,CACI3B,YAZI,WAChB,IAAM+B,EAAOpJ,EAAYsJ,YACzBJ,EAAW,CACP1B,YAAa4B,EAAK5B,YAClB3C,IAAKuE,EAAKvE,IACV8C,cAAe,SAAC0B,GAAD,OAAUD,EAAKzB,cAAc0B,OAQpCZ,WAAYc,QAAQlF,GACpBA,QAASA,IAGb,uB,MCnChBmF,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.7701a787.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useState } from \"react\";\nimport { authService } from \"../myFirebase\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(false);\n    const [error, setError] = useState(\"\");\n    const onChange = (event) => {\n        const {\n            target: { name, value },\n        } = event;\n        if (name === \"email\") {\n            setEmail(value);\n        } else if (name === \"password\") {\n            setPassword(value);\n        }\n    };\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            if (newAccount) {\n                //계정 생성\n                await authService.createUserWithEmailAndPassword(\n                    email,\n                    password\n                );\n            } else {\n                //로그인\n                await authService.signInWithEmailAndPassword(email, password);\n            }\n        } catch (error) {\n            setError(error.message);\n        }\n    };\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    required\n                    value={password}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    type=\"submit\"\n                    className=\"authInput authSubmit\"\n                    value={newAccount ? \"Create Account\" : \"Log In\"}\n                />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign in\" : \"Create Account\"}\n            </span>\n        </>\n    );\n};\n\nexport default AuthForm;\n","import { authService, firebaseInstance } from \"../myFirebase\";\nimport React from \"react\";\nimport AuthForm from \"../components/AuthForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faGithub,\n    faGoogle,\n    faTwitter,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n    const onSocialClick = async (event) => {\n        const {\n            target: { name },\n        } = event;\n        let provider;\n        if (name === \"google\") {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\") {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        await authService.signInWithPopup(provider);\n    };\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button\n                    onClick={onSocialClick}\n                    name=\"google\"\n                    className=\"authBtn\"\n                >\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button\n                    onClick={onSocialClick}\n                    name=\"github\"\n                    className=\"authBtn\"\n                >\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Auth;\n","import { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { dbService, storageService } from \"../myFirebase\";\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"정말로 삭제하시겠습니까?\");\n        if (ok) {\n            //delete\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    };\n    const toggleEditing = () => setEditing((prev) => !prev);\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            text: newTweet,\n        });\n        setEditing(false);\n    };\n    const onChange = (evnet) => {\n        const {\n            target: { value },\n        } = evnet;\n        setNewTweet(value);\n    };\n    return (\n        <div className=\"tweet\">\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit} className=\"container tweetEdit\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Edit your tweet\"\n                            value={newTweet}\n                            required\n                            onChange={onChange}\n                            autoFocus\n                            className=\"formInput\"\n                        />\n                        <input\n                            type=\"submit\"\n                            value=\"Update Tweet\"\n                            className=\"formBtn\"\n                        />\n                    </form>\n                    <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                        Cancel\n                    </span>\n                </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.attachmentUrl && (\n                        <img src={tweetObj.attachmentUrl} />\n                    )}\n                    {isOwner && (\n                        <div className=\"tweet__actions\">\n                            <span onClick={onDeleteClick}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                                <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Tweet;\n","import { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { dbService, storageService } from \"../myFirebase\";\n\nconst TweetFactory = ({ userObj }) => {\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setTweet(value);\n    };\n    const onSubmit = async (event) => {\n        if (tweet === \"\") {\n            return;\n        }\n        event.preventDefault();\n        let attachmentUrl = \"\";\n\n        if (attachment !== \"\") {\n            const attachmentRef = storageService\n                .ref()\n                .child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(\n                attachment,\n                \"data_url\"\n            ); //attachment의 string은 이미지 전체를 의미한다.\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const tweetObj = {\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        };\n        await dbService.collection(\"tweets\").add(tweetObj);\n        setTweet(\"\");\n        setAttachment(\"\");\n    };\n    const onFileChange = (event) => {\n        const {\n            target: { files },\n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: { result },\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n    };\n    const onClearAttachment = () => setAttachment(\"\");\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                    className=\"factoryInput__input\"\n                    value={tweet}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"&rarr;\"\n                    className=\"factoryInput__arrow\"\n                />\n            </div>\n            <label for=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input\n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{ opacity: 0 }}\n            />\n\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                        src={attachment}\n                        style={{ backgroundImage: attachment }}\n                    />\n                    <div\n                        className=\"factoryForm__clear\"\n                        onClick={onClearAttachment}\n                    >\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default TweetFactory;\n","import React, { useEffect, useState } from \"react\";\nimport Tweet from \"../components/Tweet\";\nimport { dbService } from \"../myFirebase\";\nimport TweetFactory from \"../components/TweetFactory\";\n\nconst Home = ({ userObj }) => {\n    const [tweets, setTweets] = useState([]);\n    useEffect(() => {\n        dbService.collection(\"tweets\").onSnapshot((snapshot) => {\n            const tweetArray = snapshot.docs.map((doc) => ({\n                id: doc.id,\n                ...doc.data(),\n            }));\n            setTweets(tweetArray);\n        });\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <TweetFactory userObj={userObj} />\n            <div style={{ marginTop: 30 }}>\n                {tweets.map((tweet) => (\n                    <Tweet\n                        key={tweet.id}\n                        tweetObj={tweet}\n                        isOwner={tweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { authService } from \"../myFirebase\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewDisplayName(value);\n    };\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if (userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({\n                displayName: newDisplayName,\n            });\n            refreshUser();\n        }\n    };\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input\n                    autoFocus\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"Display name\"\n                    value={newDisplayName}\n                    className=\"formInput\"\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{ marginTop: 10 }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    );\n};\nexport default Profile;\n","import { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst Navigation = ({ userObj }) => (\n    <nav>\n        <ul\n            style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}\n        >\n            <li>\n                <Link to=\"/\" style={{ marginRight: 10 }}>\n                    <FontAwesomeIcon\n                        icon={faTwitter}\n                        color={\"#04AAFF\"}\n                        size=\"2x\"\n                    />\n                </Link>\n            </li>\n            <li>\n                <Link\n                    to=\"/profile\"\n                    style={{\n                        marginLeft: 10,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        fontSize: 12,\n                    }}\n                >\n                    <FontAwesomeIcon\n                        icon={faUser}\n                        color={\"#04AAFF\"}\n                        size=\"2x\"\n                    />\n                    <span style={{ marginTop: 10 }}>\n                        {userObj.displayName\n                            ? `${userObj.displayName}의 Profile`\n                            : \"Profile\"}\n                    </span>\n                </Link>\n            </li>\n        </ul>\n    </nav>\n);\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Profile from \"../routes/Profile\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                {isLoggedIn ? (\n                    <div\n                        style={{\n                            maxWidth: 890,\n                            width: \"100%\",\n                            margin: \"0 auto\",\n                            marginTop: 80,\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}\n                    >\n                        <Route exact path=\"/\">\n                            <Home userObj={userObj} />\n                        </Route>\n                        <Route exact path=\"/profile\">\n                            <Profile\n                                userObj={userObj}\n                                refreshUser={refreshUser}\n                            />\n                        </Route>\n                    </div>\n                ) : (\n                    <Route exact path=\"/\">\n                        <Auth />\n                    </Route>\n                )}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default AppRouter;\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"../myFirebase\";\n\nfunction App() {\n    const [init, setInit] = useState(false);\n    const [userObj, setUserObj] = useState(null);\n    useEffect(() => {\n        authService.onAuthStateChanged((user) => {\n            //로그인 로그아웃 & 초기화 될 때 발동 된다\n            if (user) {\n                setUserObj({\n                    displayName: user.displayName,\n                    uid: user.uid,\n                    updateProfile: (args) => user.updateProfile(args),\n                });\n            } else {\n                setUserObj(null);\n            }\n            setInit(true);\n        });\n    }, []);\n    const refreshUser = () => {\n        const user = authService.currentUser;\n        setUserObj({\n            displayName: user.displayName,\n            uid: user.uid,\n            updateProfile: (args) => user.updateProfile(args),\n        });\n    };\n    return (\n        <>\n            {init ? (\n                <AppRouter\n                    refreshUser={refreshUser}\n                    isLoggedIn={Boolean(userObj)}\n                    userObj={userObj}\n                />\n            ) : (\n                \"Initializing .....\"\n            )}\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}